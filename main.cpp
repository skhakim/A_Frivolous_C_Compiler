#include <iostream>
#include <string>
#include <bits/stdc++.h>

using namespace std;

int main() {
    std::string yx = "Hello, %d, world";

    //printf(x.c_str(), 5);
    string x = "\n"
    "OUTDEC PROC \n"
    "; PRINTS AX AS A SIGNED DECIMAL INTEGER \n"
    "; INPUT : AX \n"
    "; OUTPUT : NONE \n"
    "\n"
    "    ; ALWAYS START PROC BY STORING REGISTERS\n"
    "    PUSH AX\n"
    "    PUSH BX\n"
    "    PUSH CX\n"
    "    PUSH DX \n"
    "    \n"
    "    ; TEST AX FOR ZERO \n"
    "    TEST AX, AX\n"
    "    JGE @END_IF1 \n"
    "    \n"
    "    ; AX IS NEGATIVE  \n"
    "    \n"
    "        ; SAVE THE NUMBER \n"
    "        PUSH AX\n"
    "        \n"
    "        ; PRINT '-' \n"
    "        MOV DL, '-'\n"
    "        MOV AH, 2\n"
    "        INT 21H \n"
    "        \n"
    "        ; RESTORE AX\n"
    "        POP AX\n"
    "        ; AX = -AX \n"
    "        ; THIS OPERATION KEEPS |VAL| IN AX \n"
    "        NEG AX \n"
    "        \n"
    "    ; AX IS NONNEGATIVE \n"
    "    @END_IF1:\n"
    "    \n"
    "        ; CLEAR CX  \n"
    "        AND CX, 0 \n"
    "        ; BX IS OUR DIVISOR WHICH HOLDS 10D \n"
    "        MOV BX, 10D \n"
    "        \n"
    "    ; A REPEAT LOOP\n"
    "    @REPEAT_1:\n"
    "        \n"
    "        AND DX, 0 \n"
    "        ; NOW (DX AX) EQUALS OUR DIVIDEND \n"
    "        DIV BX \n"
    "        ; PUSH THE REMAINDER\n"
    "        PUSH DX\n"
    "        ; ONE DIGIT MORE \n"
    "        INC CX\n"
    "        ; CHECKING WHETHER THE RESULT IS ZERO \n"
    "        OR AX, AX\n"
    "        ; IF NOT ZERO, REPEAT THE LOOP \n"
    "        JNZ @REPEAT_1\n"
    "                       \n"
    "    ; FOR PRINTING CHARS, SET AH = 2\n"
    "    MOV AH, 2\n"
    "    \n"
    "    ; FOR COUNT=CX TIMES \n"
    "    @PRINT_LOOP:\n"
    "    \n"
    "    \n"
    "        ; DL SHOULD CONTAIN THE RESULT \n"
    "        POP DX\n"
    "        ; ADD 48 TO GET THE DIGIT ASCII \n"
    "        ADD DX, 48     \n"
    "        INT 21H \n RET fhewwdjfewhfb;  nhne"
    "        LOOP @PRINT_LOOP \n"
    "        \n    \n"
    "    MOV DL, CR\n"
    "    INT 21H \n"
    "    MOV DL, LF \n"
    "    INT 21H "
    "    ; THE LOOP IS OVER\n"
    "    ; REGISTERS SHOULD BE POPPED IN THE REVERSE ORDER OF THEIR INSERTION\n"
    "    POP DX\n"
    "    POP CX\n"
    "    POP BX\n"
    "    POP AX       \n"
    "    \n"
    "    ; RETURN TO THE CALLER \n"
    "    RET                    \n"
    "    \n"
    "OUTDEC ENDP   ";

    cout << regex_replace(x, regex("RET .*\n"), ("JMP DOS_EXIT \n"));

    return 0;
}
